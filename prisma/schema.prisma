// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.oqhqapbawlhxjnixjylx:P7730922246@aws-0-us-west-1.pooler.supabase.com:5432/postgres"
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  password         String?
  role             String    @default("USER")
  image            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  products         Product[] @relation("UserToProducts")
  cart             Cart?     @relation("UserToCart")
}

enum ProductType {
  ALL
  CLOTHING
  FOOD
  GROCERY
  CUSTOMIZED
  ELECTRONICS
  OTHER
}

model Product {
  id          String      @id @default(cuid())
  slug        String      @unique
  name        String
  description String
  price       Float
  oldPrice    Float?
  type        ProductType
  inventory   Int         @default(0)
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  images      String[]
  details     Json? // For flexible product attributes
  categories  Category[]
  variants  Variant[]
  cartItems   CartItem[]
  sellerId    String // ID of the user selling this product
  seller      User        @relation("UserToProducts", fields: [sellerId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  products    Product[]
  parentId    String?
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id])
  children    Category[] @relation("SubCategories")
}

model Variant {
  id        String  @id @default(cuid())
  productId String
  name      String // e.g., "Size", "Color"
  value     String // e.g., "XL", "#FF0000"
  sku       String?
  price     Float? // Override product price if needed
  inventory Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Add onDelete here
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation("UserToCart", fields: [userId], references: [id])
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Image {
  id    String @id @default(cuid())
  hash  String @unique
  url   String
  createdAt DateTime @default(now())
}
